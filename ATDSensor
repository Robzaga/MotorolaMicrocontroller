#include <hidef.h> // common defines and macros
#include "derivative.h" // derivative-specific definitions
#include "mc9s12dg256.h"

#define LCD_DATA PORTK
#define LCD_CTRL PORTK
#define RS 0x01
#define EN 0x02


void COMWRT4(unsigned char);
void DATWRT4(unsigned char); //Decleration of Prototype functions
void MSDelay(unsigned int);
void ATD(void);
void conversion(unsigned char);
void initLCD(void);

void main(void) {
  ATD0CTL4 = 0x01; //Sets the ATD system to have a 8 bit resulution.
  ATD0CTL3 = 0x18; //Set ATD0CTL3 to hex 18 to enable 3 conversion per ATD sequence
  ATD0CTL2 = 0x80; //Initialize the ATD system
  MSDelay(100);
  initLCD();
  
  for(;;) {
    ATD0CTL5 = 0x14; //poll to make sure ATD sequence is complete before reading
     while(ATD0STAT0 < 0x80);
    ATD(); //Run the ATD function
  }
}

void ATD() {
      COMWRT4(0x80); //set start posistion, home position
      DATWRT4('L'); //Print out "L:"
      DATWRT4(':');
      conversion(ATD0DR0H); //Print out the value contained in ATDODROH, which contains the results of the atd conversion
      DATWRT4((unsigned char)0x20); //Print out a space. Space has a hex value of 20
      DATWRT4('C'); //Print out "C:"
      DATWRT4(':');
      conversion(ATD0DR1H); //Print out ATD0DR1H
      DATWRT4((unsigned char)0x20); //Print out space
      DATWRT4('R'); //Print out "R:"
      DATWRT4(':');
      conversion(ATD0DR2H); //Print out ATD0DR2H
}

void conversion(unsigned char hexVal) {
      unsigned char highNibble = hexVal / 16; //get the first hex value and store it in highNibble
      unsigned char lowNibble = hexVal % 16; //get the second hex value and store it in lowNibble
      if(highNibble > 9) //If the value of the high nibble is over 9 then it needs to be displayed as
        highNibble += 0x37; //a letter to be hex. Adding 0x30 makes the value an ascii numeral while adding
      else //0x37 to a value conerts the value to a letter. This code does that with
        highNibble += 0x30; //both of the nibbles of an input
      if(lowNibble > 9)
        lowNibble += 0x37;
      else
        lowNibble += 0x30;
      DATWRT4(highNibble); //print the high nibble to the lcd
      DATWRT4(lowNibble); //print the low nibble to the lcd
}

void initLCD() {
      DDRK = 0xFF;
      COMWRT4(0x33); //reset sequence provided by data sheet
      COMWRT4(0x32); //reset sequence provided by data sheet
      COMWRT4(0x28); //Function set to four bit data length 2 line, 5 x 7 dot format
      COMWRT4(0x06); //entry mode set, increment, no shift
      COMWRT4(0x0C); //Display set, disp on, cursor on, blink off
      COMWRT4(0x01); //Clear display
      COMWRT4(0x80); //set start posistion, home position
}

void COMWRT4(unsigned char command) {
       unsigned char x;
       
      MSDelay(1);
      x = (command & 0xF0) >> 2; //shift high nibble to center of byte for Pk5-Pk2
      LCD_DATA =LCD_DATA & ~0x3C; //clear bits Pk5-Pk2
      LCD_DATA = LCD_DATA | x; //sends high nibble to PORTK
      MSDelay(1);
      LCD_CTRL = LCD_CTRL & ~RS; //set RS to command (RS=0)
      MSDelay(1);
      LCD_CTRL = LCD_CTRL | EN; //rais enable
      MSDelay(5);
      LCD_CTRL = LCD_CTRL & ~EN; //Drop enable to capture command
      MSDelay(15); //wait
      x = (command & 0x0F)<< 2; // shift low nibble to center of byte for Pk5-Pk2
      LCD_DATA =LCD_DATA & ~0x3C; //clear bits Pk5-Pk2
      LCD_DATA =LCD_DATA | x; //send low nibble to PORTK
      LCD_CTRL = LCD_CTRL | EN; //rais enable
      MSDelay(5);
      LCD_CTRL = LCD_CTRL & ~EN; //drop enable to capture command
      MSDelay(15);
}
void DATWRT4(unsigned char data) {
      unsigned char x;
      MSDelay(1);
      x = (data & 0xF0) >> 2;
      LCD_DATA =LCD_DATA & ~0x3C;
      LCD_DATA = LCD_DATA | x;
      MSDelay(1);
      LCD_CTRL = LCD_CTRL | RS;
      MSDelay(1);
      LCD_CTRL = LCD_CTRL | EN;
      MSDelay(1);
      LCD_CTRL = LCD_CTRL & ~EN;
      MSDelay(5);
      x = (data & 0x0F)<< 2;
      LCD_DATA =LCD_DATA & ~0x3C;
      LCD_DATA = LCD_DATA | x;
      LCD_CTRL = LCD_CTRL | EN;
      MSDelay(1);
      LCD_CTRL = LCD_CTRL & ~EN;
      MSDelay(15);
}

//This function delays for a certain number of milliseconds equal to the argument itime.
void MSDelay(unsigned int itime) {
      unsigned int i; unsigned int j;
      for(i=0;i<itime;i++)
      for(j=0;j<4000;j++);
}
